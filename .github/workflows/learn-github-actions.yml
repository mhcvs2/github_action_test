name: "[CI] Pre Pull Request Test 合并之前的接口测试"
on:
  push:
    # types: [opened, reopened ]
jobs:
  test_job1:
    runs-on: ubuntu-latest
    steps:
    - name: '下载要合并的分支代码'
      uses: actions/checkout@v3
      with:
        persist-credentials: false
        repository: 'qiduoduo-inc/front-circle-node-server'
        ref: dev
        token: ${{ secrets.token }}
        path: front-circle-node-server
    - name: '运行代码规范检查'
      run: "ls ./; pwd"
      working-directory: front-circle-node-server

    # - name: '下载测试项目'
    #   uses: actions/checkout@v3
    #   with:
    #     persist-credentials: false
    #     repository: 'qiduoduo-inc/front-circle-test'
    #     token: ${{ secrets.token }}
    #     ref: dev
    #     path: front-circle-test

    # - name: '下载测试数据'
    #   uses: actions/checkout@v3
    #   with:
    #     persist-credentials: false
    #     repository: qiduoduo-inc/front-circle-data
    #     token: ${{ secrets.token }}
    #     ref: 'dev'
    #     path: front-circle-data

    # - name: '配置Node 16.15.1环境'
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: '16.15.1'

    # - name: 'npm登录npm.pkg.github.com私有镜像'
    #   uses: healthplace/npmrc-registry-login-action@v1.0.9
    #   with:
    #     scope: '@qiduoduo-inc'
    #     registry: 'https://npm.pkg.github.com'
    #     auth-token: ${{ secrets.token }}
    #     path: /home/runner/

    # - name: '使用缓存安装npm依赖包'
    #   uses: bahmutov/npm-install@v1
    #   with:
    #     useLockFile: false
    #     working-directory: front-circle-node-server

    # - name: '使用缓存安装npm依赖包2'
    #   uses: bahmutov/npm-install@v1
    #   with:
    #     useLockFile: false
    #     working-directory: front-circle-test

    # - name: '启动MySQL 5.7和Redis服务'
    #   run: |
    #     # 启动mysql
    #     docker run -itd -p 3306:3306  \
    #       --name mysql \
    #       -e  MYSQL_ROOT_PASSWORD=123456 \
    #       -e MYSQL_DATABASE=front_circle_test \
    #       -v ${PWD}/database/:/tmp/database/ \
    #       mysql:5.7 --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci

    #     mysql_ip=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' mysql`

    #     echo "wait mysql started"
    #     timeout 30 sh -c "until nc -z ${mysql_ip} 3306; do sleep 1; done"
    #     echo mysql started.

    #     # 初始化数据库的表结构
    #     docker exec -i mysql mysql  -p123456  front_circle_test < front-circle-node-server/node_modules/@qiduoduo-inc/front-circle-db/db/front_circle.sql

    #     # 启动redis
    #     docker run -itd --name redis  -p 6379:6379 redis:6.0 --requirepass "123456"
    #     redis_ip=`docker inspect --format '{{ .NetworkSettings.IPAddress }}' redis`

    #     echo "wait redis started"
    #     timeout 30 sh -c "until nc -z ${redis_ip} 6379; do sleep 1; done"
    #     echo "redis started"
        
    #     # 查看状态
    #     docker ps -a
    
    # - name: '运行代码规范检查'
    #   run: "cd front-circle-node-server; npm run ci:lint  --max-old-space-size=4096"

    # - name: '运行单元测试检查'
    #   run: "cd front-circle-node-server; npm run ci:test  --max-old-space-size=4096"

    # - name: '启动server'
    #   run: 'cd front-circle-node-server; nohup npm run dev &'

    # - name: '等待server启动'
    #   run: 'timeout 30 sh -c "until nc -z localhost 9000; do sleep 1; done"'

    # - name: '安装playwright'
    #   uses: maxmilton/action-setup-playwright@v1
    #   with:
    #       # 可选项: chromium, firefox, webkit
    #       browsers: chromium
    #       headless: true

    # - name: '执行playwright测试'
    #   run: 'cd front-circle-test; npx playwright test tests/backend/midway/'

  # test_job1:
  #   runs-on: [self-hosted, test]
  #   steps: 
  #   - run: echo ${{github.head_ref}}
  #   - uses: actions/checkout@v3
  #     with: 
  #       ref: '${{github.head_ref}}'
  #   - run: echo pull request opened....
  #   - run: cat a.py
#  test_job1:
#    runs-on: [self-hosted]
#    steps:
#      - uses: actions/checkout@master
#      - uses: travisj/build-number-action@v1
#        id: project-build-number
#      - run: pwd
#      - run: ls ./
#      - run: echo ${{ steps.project-build-number.outputs.build-number }}
# on:
#   pull_request:
#     types: [closed]
#     branched: 
#     - dev
# jobs:
#   if_merged:
#     if: github.event.pull_request.merged == true
#     runs-on: [self-hosted, test]
#     steps: 
#     - uses: actions/checkout@v3
#     - run: echo pull request was merged....
#     - run: cat a.py
#  test_job2:
#    runs-on: [self-hosted, test]
#    container:
#      image: registry.cn-hangzhou.aliyuncs.com/mhc_base/net-tools:latest
#      env:
#        NODE_ENV: development
#      ports:
#        - 80
# #      volumes:
# #        - my_docker_volume:/volume_mount
#      options: --cpus 1
  #  steps:
  #    - uses: actions/checkout@master
  #    - run: pwd
  #    - run: ls ./
  #    - run: ls /
  #    - run: echo $NODE_ENV
#   test_job3:
#     runs-on: [self-hosted, test]
#     # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idservices
#     services:
#       nginx:
#         image: nginx
#         ports:
#           - 8080:80
#     container:
#       image: centos:7
#       env:
#         NODE_ENV: development
#       ports:
#         - 80
# #      volumes:
# #        - my_docker_volume:/volume_mount
#       options: --cpus 1
#     steps:
#       - run: curl nginx:80
